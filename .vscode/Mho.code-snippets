{
	// Place your Mho workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Sapphire command template": {
		"prefix": "command",
		"body": [
			"import { Command } from '@sapphire/framework';",
			"import { ApplyOptions } from '@sapphire/decorators';",
			"import { Message } from 'discord.js';",
			"",
			"@ApplyOptions({",
			"  name: '${TM_FILENAME_BASE}',",
			"  description: '$1',",
			"  detailedDescription: '$2",
			"  cooldownLimit: 2,",
			"  cooldownDelay: 10,",
			"  flags: ['$3']",
			"  preconditions: ['$4'],",
			"})",
			"",
			"export default class extends Command {",
			"  public async run(message: Message) {",
			"    $0",
			"  }",
			"}",
			""
		],
		"description": "Sapphire command template"
	},
	
	"Sapphire listener template": {
		"prefix": "listener",
		"body": [
			"import { EventOptions, Listener } from '@sapphire/framework';",
			"import { ApplyOptions } from '@sapphire/decorators';",
			"",
			"@ApplyOptions<EventOptions>({",
			"  event: '$1'",
			"  once: ${2:true}",
			"})",
			"",
			"export default class extends Listener {",
			"  public async run() {",
			"    $0",
			"  }",
			"}",
			""
		],
		"description": "Sapphire listener template"
	}
}